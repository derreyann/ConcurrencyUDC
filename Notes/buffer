/**
 * @file buffer
 * @author Yann Derr√© (yann.derre@utbm.fr)
 * @brief 
 * @version 0.1
 * @date 11-02-2022
 * 
 * @copyright Copyright (c) 2022
 * 
 */
#include <pthread.h>

/**
 * @brief here, signal and broadcast are equivalenet of */ pthread_cond_signal /* and */ pthread_cond_broadcast
 /* 
 * @param e 
 */

void insert(element *e);
element remove();
int elements(); //number of elements in buffer
int buffer_size(); //max number of elements
mutex bufferlock
cond FULL, EMPTY
/**
 * @brief producer function, checks if is full, waits
 * 
 */
producer(){
    int done=0;
    element e=create_element();
    lock(bufferlock);
    while(elements()==size()){ //buffer is FULL
        producerwaiting++;
        wait(FULL,bufferlock); //wait for it to empty
    }
    if(elements()==1){
        signal(EMPTY);
    }
    unlock(bufferlock);
}
/**
 * @brief waits for it go fullup, then takes out
 * 
 */
consummer(){
    lock(bufferlock);
    while(elements()==0){
        wait(EMPTY, bufferlock);
    }
    element e=remove();
    if(elements()==size()-1){
        signal(FULL);
    }
    unlock(bufferlock);
    process(e);
}
/**
 * @brief wait function, atomic instr
 * 
 */
wait(){
    unlock();
    sleep();
    lock();
}
